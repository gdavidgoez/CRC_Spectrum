Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
--- a/main.py	(revision bf3eac0c8ebf47f8165d23e1234b989b7bd99ed3)
+++ b/main.py	(date 1676043397658)
@@ -1,0 +1,270 @@
+#!/usr/bin/env python3
+# -*- coding: utf-8 -*-
+
+#
+# SPDX-License-Identifier: GPL-3.0
+#
+# GNU Radio Python Flow Graph
+# Title: FFT_sensado_Referencia
+# Author: David Góez
+# GNU Radio version: 3.10.4.0
+
+from packaging.version import Version as StrictVersion
+
+if __name__ == '__main__':
+    import ctypes
+    import sys
+    if sys.platform.startswith('linux'):
+        try:
+            x11 = ctypes.cdll.LoadLibrary('libX11.so')
+            x11.XInitThreads()
+        except:
+            print("Warning: failed to XInitThreads()")
+
+from PyQt5 import Qt
+from gnuradio import qtgui
+import sip
+from gnuradio import blocks
+from gnuradio import gr
+from gnuradio.filter import firdes
+from gnuradio.fft import window
+import sys
+import signal
+from argparse import ArgumentParser
+from gnuradio.eng_arg import eng_float, intx
+from gnuradio import eng_notation
+from gnuradio import uhd
+import time
+from gnuradio.fft import logpwrfft
+from gnuradio.qtgui import Range
+from PyQt5 import QtCore
+import threading
+
+import numpy as np
+
+from gnuradio import qtgui
+
+class FFT_sensado_v3(gr.top_block, Qt.QWidget):
+
+    def __init__(self):
+        gr.top_block.__init__(self, "FFT_sensado_v3", catch_exceptions=True)
+        Qt.QWidget.__init__(self)
+        self.setWindowTitle("FFT_sensado_v3")
+        qtgui.util.check_set_qss()
+        try:
+            self.setWindowIcon(Qt.QIcon.fromTheme('gnuradio-grc'))
+        except:
+            pass
+        self.top_scroll_layout = Qt.QVBoxLayout()
+        self.setLayout(self.top_scroll_layout)
+        self.top_scroll = Qt.QScrollArea()
+        self.top_scroll.setFrameStyle(Qt.QFrame.NoFrame)
+        self.top_scroll_layout.addWidget(self.top_scroll)
+        self.top_scroll.setWidgetResizable(True)
+        self.top_widget = Qt.QWidget()
+        self.top_scroll.setWidget(self.top_widget)
+        self.top_layout = Qt.QVBoxLayout(self.top_widget)
+        self.top_grid_layout = Qt.QGridLayout()
+        self.top_layout.addLayout(self.top_grid_layout)
+
+        self.settings = Qt.QSettings("GNU Radio", "FFT_sensado_v3")
+
+        try:
+            if StrictVersion(Qt.qVersion()) < StrictVersion("5.0.0"):
+                self.restoreGeometry(self.settings.value("geometry").toByteArray())
+            else:
+                self.restoreGeometry(self.settings.value("geometry"))
+        except:
+            pass
+
+        ##################################################
+        # Variables
+        ##################################################
+        self.variable_function = variable_function = 0
+        self.samp_rate = samp_rate = 56e6
+        self.nfft = nfft = 4096
+        self.Frecuencia = Frecuencia = 100000000
+        self.Average = Average = 0.07
+        self.frec_val = self.Frecuencia
+        self.tFrecuencia = self.Frecuencia
+        self.fscan = 3900000000
+        self.step = 100000000
+        self.Fstart = 100000000
+        ##################################################
+        # Blocks
+        ##################################################
+        self.blocks_probe = blocks.probe_signal_vf(4096)
+        self._Average_range = Range(0.001, 1, 0.001, 0.07, 200)
+        self._Average_win = GrRangeWidget(self._Average_range, self.set_Average, "'Average'", "counter_slider", float, QtCore.Qt.Horizontal, "value")
+
+        self.top_layout.addWidget(self._Average_win)
+        def _variable_function_probe():
+##########################################################################
+                                  #Trabajar aquí
+###########################################################################
+          while True:
+            val = self.blocks_probe.level()
+            sint=np.array(val)
+            if np.std(sint) !=0:
+                Umbral= np.mean(sint)+(np.max(sint)-np.mean(sint))/2
+                s=np.where(sint>Umbral,1,-1)
+                print(np.where(s==1))
+                if self.frec_val > self.fscan:
+                    self.frec_val= self.Fstart
+                self.frec_val = self.frec_val + self.step
+                self.tset_Frecuencia(self.frec_val)
+                print(self.frec_val)
+            try:
+              try:
+                self.doc.add_next_tick_callback(functools.partial(self.set_variable_function,val))
+              except AttributeError:
+                self.set_variable_function(val)
+            except AttributeError:
+              pass
+            time.sleep(3)
+            # time.sleep(1.0 / (10))
+        _variable_function_thread = threading.Thread(target=_variable_function_probe)
+        _variable_function_thread.daemon = True
+        _variable_function_thread.start()
+        self.uhd_usrp_source_0_0 = uhd.usrp_source(
+            ",".join(("", "")),
+            uhd.stream_args(
+                cpu_format="fc32",
+                args='',
+                channels=list(range(0,1)),
+            ),
+        )
+        self.uhd_usrp_source_0_0.set_samp_rate(samp_rate)
+        self.uhd_usrp_source_0_0.set_time_unknown_pps(uhd.time_spec(0))
+
+        self.uhd_usrp_source_0_0.set_center_freq(100e6, 0)
+        self.uhd_usrp_source_0_0.set_antenna('RX2', 0)
+        self.uhd_usrp_source_0_0.set_bandwidth(100000000, 0)
+        self.uhd_usrp_source_0_0.set_gain(38, 0)
+        self.qtgui_vector_sink_f_0 = qtgui.vector_sink_f(
+            nfft,
+            0,
+            1.0,
+            "x-Axis",
+            "y-Axis",
+            "",
+            1, # Number of inputs
+            None # parent
+        )
+        self.qtgui_vector_sink_f_0.set_update_time(0.10)
+        self.qtgui_vector_sink_f_0.set_y_axis((-140), 10)
+        self.qtgui_vector_sink_f_0.enable_autoscale(False)
+        self.qtgui_vector_sink_f_0.enable_grid(False)
+        self.qtgui_vector_sink_f_0.set_x_axis_units("")
+        self.qtgui_vector_sink_f_0.set_y_axis_units("")
+        self.qtgui_vector_sink_f_0.set_ref_level(0)
+
+
+        labels = ['', '', '', '', '',
+            '', '', '', '', '']
+        widths = [1, 1, 1, 1, 1,
+            1, 1, 1, 1, 1]
+        colors = ["blue", "red", "green", "black", "cyan",
+            "magenta", "yellow", "dark red", "dark green", "dark blue"]
+        alphas = [1.0, 1.0, 1.0, 1.0, 1.0,
+            1.0, 1.0, 1.0, 1.0, 1.0]
+
+        for i in range(1):
+            if len(labels[i]) == 0:
+                self.qtgui_vector_sink_f_0.set_line_label(i, "Data {0}".format(i))
+            else:
+                self.qtgui_vector_sink_f_0.set_line_label(i, labels[i])
+            self.qtgui_vector_sink_f_0.set_line_width(i, widths[i])
+            self.qtgui_vector_sink_f_0.set_line_color(i, colors[i])
+            self.qtgui_vector_sink_f_0.set_line_alpha(i, alphas[i])
+
+        self._qtgui_vector_sink_f_0_win = sip.wrapinstance(self.qtgui_vector_sink_f_0.qwidget(), Qt.QWidget)
+        self.top_layout.addWidget(self._qtgui_vector_sink_f_0_win)
+        self.logpwrfft_x_0 = logpwrfft.logpwrfft_c(
+            sample_rate=samp_rate,
+            fft_size=nfft,
+            ref_scale=2,
+            frame_rate=30,
+            avg_alpha=Average,
+            average=True,
+            shift=True)
+
+
+        ##################################################
+        # Connections
+        ##################################################
+        self.connect((self.logpwrfft_x_0, 0), (self.blocks_probe, 0))
+        self.connect((self.logpwrfft_x_0, 0), (self.qtgui_vector_sink_f_0, 0))
+        self.connect((self.uhd_usrp_source_0_0, 0), (self.logpwrfft_x_0, 0))
+
+
+    def closeEvent(self, event):
+        self.settings = Qt.QSettings("GNU Radio", "FFT_sensado_v3")
+        self.settings.setValue("geometry", self.saveGeometry())
+        self.stop()
+        self.wait()
+
+        event.accept()
+
+    def get_variable_function(self):
+        return self.variable_function
+
+    def set_variable_function(self, variable_function):
+        self.variable_function = variable_function
+
+    def get_samp_rate(self):
+        return self.samp_rate
+
+    def set_samp_rate(self, samp_rate):
+        self.samp_rate = samp_rate
+        self.logpwrfft_x_0.set_sample_rate(self.samp_rate)
+        self.uhd_usrp_source_0_0.set_samp_rate(self.samp_rate)
+
+    def get_nfft(self):
+        return self.nfft
+
+    def set_nfft(self, nfft):
+        self.nfft = nfft
+
+    def get_Average(self):
+        return self.Average
+
+    def set_Average(self, Average):
+        self.Average = Average
+        self.logpwrfft_x_0.set_avg_alpha(self.Average)
+
+    def tset_Frecuencia(self, Frecuencia):
+        self.tFrecuencia = Frecuencia
+        self.uhd_usrp_source_0_0.set_center_freq(self.tFrecuencia, 0)
+
+
+def main(top_block_cls=FFT_sensado_v3, options=None):
+
+    if StrictVersion("4.5.0") <= StrictVersion(Qt.qVersion()) < StrictVersion("5.0.0"):
+        style = gr.prefs().get_string('qtgui', 'style', 'raster')
+        Qt.QApplication.setGraphicsSystem(style)
+    qapp = Qt.QApplication(sys.argv)
+
+    tb = top_block_cls()
+
+    tb.start()
+
+    tb.show()
+
+    def sig_handler(sig=None, frame=None):
+        tb.stop()
+        tb.wait()
+
+        Qt.QApplication.quit()
+
+    signal.signal(signal.SIGINT, sig_handler)
+    signal.signal(signal.SIGTERM, sig_handler)
+
+    timer = Qt.QTimer()
+    timer.start(500)
+    timer.timeout.connect(lambda: None)
+
+    qapp.exec_()
+
+if __name__ == '__main__':
+    main()
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
--- /dev/null	(date 1676042280771)
+++ b/.idea/misc.xml	(date 1676042280771)
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.10 (FFT_Sensado)" project-jdk-type="Python SDK" />
+</project>
\ No newline at end of file
Index: .idea/inspectionProfiles/profiles_settings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/inspectionProfiles/profiles_settings.xml b/.idea/inspectionProfiles/profiles_settings.xml
new file mode 100644
--- /dev/null	(date 1676042280775)
+++ b/.idea/inspectionProfiles/profiles_settings.xml	(date 1676042280775)
@@ -0,0 +1,6 @@
+<component name="InspectionProjectProfileManager">
+  <settings>
+    <option name="USE_PROJECT_PROFILE" value="false" />
+    <version value="1.0" />
+  </settings>
+</component>
\ No newline at end of file
Index: .idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
--- /dev/null	(date 1676042280807)
+++ b/.idea/.gitignore	(date 1676042280807)
@@ -0,0 +1,3 @@
+# Default ignored files
+/shelf/
+/workspace.xml
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1676042280779)
+++ b/.idea/vcs.xml	(date 1676042280779)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$/.." vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
--- /dev/null	(date 1676042280763)
+++ b/.idea/modules.xml	(date 1676042280763)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/.idea/FFT_Sensado.iml" filepath="$PROJECT_DIR$/.idea/FFT_Sensado.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/FFT_Sensado.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/FFT_Sensado.iml b/.idea/FFT_Sensado.iml
new file mode 100644
--- /dev/null	(date 1676042280759)
+++ b/.idea/FFT_Sensado.iml	(date 1676042280759)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="PYTHON_MODULE" version="4">
+  <component name="NewModuleRootManager">
+    <content url="file://$MODULE_DIR$" />
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
